{
  "Description": "Create instances ready for IBEIS IA CodeDeploy.",
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "TagKey": {
      "Description": "The tag key that identifies this as a target for deployments.",
      "Type": "String",
      "Default": "Name",
      "AllowedPattern": "[\\x20-\\x7E]*",
      "ConstraintDescription": "Can contain only ASCII characters."
    },
    "TagValue": {
      "Description": "The tag value that identifies this as a target for deployments.",
      "Type": "String",
      "Default": "IBEIS-IA-CodeDeploy",
      "AllowedPattern": "[\\x20-\\x7E]*",
      "ConstraintDescription": "Can contain only ASCII characters."
    },
    "KeyPairName": {
      "Description": "Name of an existing Amazon EC2 key pair to enable SSH or RDP access to the instances.",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "shared-ibeis-team-key"
    },
    "InstanceType": {
      "Description": "Amazon EC2 instance type.",
      "Type": "String",
      "Default": "t1.micro",
      "ConstraintDescription": "Must be a valid Amazon EC2 instance type.",
      "AllowedValues": [
        "t1.micro",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "c3.large",
        "c3.xlarge"
      ]
    },
    "InstanceCount": {
      "Description": "Number of Amazon EC2 instances.",
      "Type": "Number",
      "Default": "3",
      "ConstraintDescription": "Must be a number between 1 and 3.",
      "MinValue": "1",
      "MaxValue": "3"
    },
    "OperatingSystem": {
      "Description": "Amazon EC2 operating system type.",
      "Type": "String",
      "Default": "Linux",
      "ConstraintDescription": "Must be Linux.",
      "AllowedValues": [
        "Linux"
      ]
    },
    "SSHLocation": {
      "Description": "The IP address range that can be used to connect using SSH or RDP to the Amazon EC2 instances.",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },
  "Mappings": {
    "RegionOS2AMI": {
      "us-west-2": {
        "Linux": "ami-9dbea4fc"
      }
    },
    "OS2SSHPort": {
      "Linux": {
        "SSHPort": "22"
      }
    }
  },
  "Conditions": {
    "LaunchInstance2": {
      "Fn::Or": [{
        "Fn::Equals": [
          "2", {
            "Ref": "InstanceCount"
          }
        ]
      }, {
        "Fn::Equals": [
          "3", {
            "Ref": "InstanceCount"
          }
        ]
      }]
    },
    "LaunchInstance3": {
      "Fn::Equals": [
        "3", {
          "Ref": "InstanceCount"
        }
      ]
    },
    "LaunchLinuxEC2Instance1": {
      "Fn::Equals": [{
          "Ref": "OperatingSystem"
        },
        "Linux"
      ]
    },
    "LaunchLinuxEC2Instance2": {
      "Fn::And": [{
        "Condition": "LaunchLinuxEC2Instance1"
      }, {
        "Condition": "LaunchInstance2"
      }]
    },
    "LaunchLinuxEC2Instance3": {
      "Fn::And": [{
        "Condition": "LaunchLinuxEC2Instance1"
      }, {
        "Condition": "LaunchInstance3"
      }]
    }
  },
  "Resources": {
    "LinuxEC2Instance": {
      "Type": "AWS::EC2::Instance",
      "Condition": "LaunchLinuxEC2Instance1",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "services": {
            "sysvint": {
              "codedeploy-agent": {
                "enabled": "true",
                "ensureRunning": "true"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionOS2AMI", {
              "Ref": "AWS::Region"
            }, {
              "Ref": "OperatingSystem"
            }
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SecurityGroups": [{
          "Ref": "SecurityGroup"
        }],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "", [
                "#!/bin/bash\n",
                "cd /home/ubuntu/\n",
                "echo \"'", { "Ref": "WaitHandle" }, "' '", { "Ref": "AWS::StackId" }, "' '", { "Ref": "AWS::Region" }, "'\" > init.config\n",
                "curl -O https://raw.githubusercontent.com/bluemellophone/ibeis_aws_codedeploy/master/scripts/ibeis-ia-cloudformation.sh\n",
                "chmod +x ./ibeis-ia-cloudformation.sh\n",
                "sudo ./ibeis-ia-cloudformation.sh '", { "Ref": "WaitHandle" }, "' '", { "Ref": "AWS::StackId" }, "' '", { "Ref": "AWS::Region" }, "' > init.log\n"
              ]
            ]
          }
        },
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "Tags": [{
          "Key": {
            "Ref": "TagKey"
          },
          "Value": {
            "Ref": "TagValue"
          }
        }],
        "IamInstanceProfile": {
          "Ref": "InstanceRoleInstanceProfile"
        }
      }
    },
    "WaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    },
    "WaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "Properties": {
        "Count": {
          "Ref": "InstanceCount"
        },
        "Handle": {
          "Ref": "WaitHandle"
        },
        "Timeout": "900"
      }
    },
    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable HTTP access via ports 80, 5000 and SSH access.",
        "SecurityGroupIngress": [{
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "CidrIp": "0.0.0.0/0"
        }, {
          "IpProtocol": "tcp",
          "FromPort": "5000",
          "ToPort": "5000",
          "CidrIp": "0.0.0.0/0"
        }, {
          "IpProtocol": "tcp",
          "FromPort": {
            "Fn::FindInMap": [
              "OS2SSHPort", {
                "Ref": "OperatingSystem"
              },
              "SSHPort"
            ]
          },
          "ToPort": {
            "Fn::FindInMap": [
              "OS2SSHPort", {
                "Ref": "OperatingSystem"
              },
              "SSHPort"
            ]
          },
          "CidrIp": {
            "Ref": "SSHLocation"
          }
        }]
      }
    },
    "CodeDeployTrustRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Sid": "1",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "codedeploy.us-west-2.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/"
      }
    },
    "CodeDeployRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "CodeDeployPolicy",
        "PolicyDocument": {
          "Statement": [{
            "Effect": "Allow",
            "Resource": [
              "*"
            ],
            "Action": [
              "ec2:Describe*"
            ]
          }, {
            "Effect": "Allow",
            "Resource": [
              "*"
            ],
            "Action": [
              "autoscaling:CompleteLifecycleAction",
              "autoscaling:DeleteLifecycleHook",
              "autoscaling:DescribeLifecycleHooks",
              "autoscaling:DescribeAutoScalingGroups",
              "autoscaling:PutLifecycleHook",
              "autoscaling:RecordLifecycleActionHeartbeat"
            ]
          }, {
            "Effect": "Allow",
            "Resource": [
              "*"
            ],
            "Action": [
              "Tag:getResources",
              "Tag:getTags",
              "Tag:getTagsForResource",
              "Tag:getTagsForResourceList"
            ]
          }]
        },
        "Roles": [{
          "Ref": "CodeDeployTrustRole"
        }]
      }
    },
    "InstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": [
                "ec2.amazonaws.com"
              ]
            },
            "Action": [
              "sts:AssumeRole"
            ]
          }]
        },
        "Path": "/"
      }
    },
    "InstanceRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "InstanceRole",
        "PolicyDocument": {
          "Statement": [{
            "Effect": "Allow",
            "Action": [
              "autoscaling:Describe*",
              "cloudformation:Describe*",
              "cloudformation:GetTemplate",
              "s3:Get*",
              "s3:List*"
            ],
            "Resource": "*"
          }]
        },
        "Roles": [{
          "Ref": "InstanceRole"
        }]
      }
    },
    "InstanceRoleInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [{
          "Ref": "InstanceRole"
        }]
      }
    },
    "LinuxEC2Instance2": {
      "Type": "AWS::EC2::Instance",
      "Condition": "LaunchLinuxEC2Instance2",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "services": {
            "sysvint": {
              "codedeploy-agent": {
                "enabled": "true",
                "ensureRunning": "true"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionOS2AMI", {
              "Ref": "AWS::Region"
            }, {
              "Ref": "OperatingSystem"
            }
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SecurityGroups": [{
          "Ref": "SecurityGroup"
        }],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "", [
                "#!/bin/bash\n",
                "cd /home/ubuntu/\n",
                "echo \"'", { "Ref": "WaitHandle" }, "' '", { "Ref": "AWS::StackId" }, "' '", { "Ref": "AWS::Region" }, "'\" > init.config\n",
                "curl -O https://raw.githubusercontent.com/bluemellophone/ibeis_aws_codedeploy/master/scripts/ibeis-ia-cloudformation.sh\n",
                "chmod +x ./ibeis-ia-cloudformation.sh\n",
                "sudo ./ibeis-ia-cloudformation.sh '", { "Ref": "WaitHandle" }, "' '", { "Ref": "AWS::StackId" }, "' '", { "Ref": "AWS::Region" }, "' > init.log\n"
              ]
            ]
          }
        },
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "Tags": [{
          "Key": {
            "Ref": "TagKey"
          },
          "Value": {
            "Ref": "TagValue"
          }
        }],
        "IamInstanceProfile": {
          "Ref": "InstanceRoleInstanceProfile"
        }
      }
    },
    "LinuxEC2Instance3": {
      "Type": "AWS::EC2::Instance",
      "Condition": "LaunchLinuxEC2Instance3",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "services": {
            "sysvint": {
              "codedeploy-agent": {
                "enabled": "true",
                "ensureRunning": "true"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionOS2AMI", {
              "Ref": "AWS::Region"
            }, {
              "Ref": "OperatingSystem"
            }
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SecurityGroups": [{
          "Ref": "SecurityGroup"
        }],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "", [
                "#!/bin/bash\n",
                "cd /home/ubuntu/\n",
                "echo \"'", { "Ref": "WaitHandle" }, "' '", { "Ref": "AWS::StackId" }, "' '", { "Ref": "AWS::Region" }, "'\" > init.config\n",
                "curl -O https://raw.githubusercontent.com/bluemellophone/ibeis_aws_codedeploy/master/scripts/ibeis-ia-cloudformation.sh\n",
                "chmod +x ./ibeis-ia-cloudformation.sh\n",
                "sudo ./ibeis-ia-cloudformation.sh '", { "Ref": "WaitHandle" }, "' '", { "Ref": "AWS::StackId" }, "' '", { "Ref": "AWS::Region" }, "' > init.log\n"
              ]
            ]
          }
        },
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "Tags": [{
          "Key": {
            "Ref": "TagKey"
          },
          "Value": {
            "Ref": "TagValue"
          }
        }],
        "IamInstanceProfile": {
          "Ref": "InstanceRoleInstanceProfile"
        }
      }
    }
  },
  "Outputs": {
    "CodeDeployTrustRoleARN": {
      "Value": {
        "Fn::GetAtt": [
          "CodeDeployTrustRole",
          "Arn"
        ]
      }
    }
  }
}